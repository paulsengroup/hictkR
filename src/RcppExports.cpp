// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <cstdint>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// version
[[nodiscard]] std::string version();
RcppExport SEXP _hictkR_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(version());
    return rcpp_result_gen;
END_RCPP
}
// nbins
[[nodiscard]] std::uint64_t nbins(const std::string& path, std::uint32_t resolution);
RcppExport SEXP _hictkR_nbins(SEXP pathSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::uint32_t >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(nbins(path, resolution));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hictkR_version", (DL_FUNC) &_hictkR_version, 0},
    {"_hictkR_nbins", (DL_FUNC) &_hictkR_nbins, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hictkR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
